type CreditsIssued @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  developer: Bytes! # address
  amount: BigInt! # uint256
  tokenId: BigInt! # uint256
  tokenURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectProposed @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  developer: Bytes! # address
  meta_name: String! # string
  meta_description: String! # string
  meta_location: String! # string
  meta_estimatedCredits: BigInt! # uint256
  meta_standard: Int! # uint8
  meta_vintage: Int! # uint16
  meta_methodology: String! # string
  meta_projectPlanCID: String! # string
  meta_eiaCID: String! # string
  meta_otherDocsCID: String! # string
  meta_metadataCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectStatusChanged @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  newStatus: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProofAudited @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  auditor: Bytes! # address
  action: Int! # uint8
  commentCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProofSubmitted @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  developer: Bytes! # address
  proofCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalReviewed @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  auditor: Bytes! # address
  action: Int! # uint8
  commentCID: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalStatusChanged @entity(immutable: true) {
  id: Bytes!
  internal_id: BigInt! # uint256
  newStatus: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type KYCSubmitted @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  role: Int! # uint8
  documentCid: String! # string
  proofOfAddressCid: String! # string
  certificationCid: String! # string
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleBurned @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  tokenId: BigInt! # uint256
  role: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleMinted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  tokenId: BigInt! # uint256
  role: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CarbonCreditApprovalForAll @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CarbonCreditOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  values: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  internal_id: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type URI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  internal_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
