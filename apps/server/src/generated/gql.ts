/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query MarketplaceListings($first: Int!, $skip: Int!, $status_in: [ListingStatus!], $seller: String!) {\n  marketplaceListings(\n    orderBy: createdAt\n    orderDirection: desc\n    skip: $skip\n    first: $first\n    where: {status_in: $status_in, seller: $seller}\n  ) {\n    id\n    seller {\n      id\n    }\n    token {\n      id\n      amount\n      retiredAmount\n      tokenURI\n      project {\n        proposal {\n          name\n        }\n      }\n    }\n    amount\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n    status\n    createdAt\n    updatedAt\n    purchases {\n      id\n      buyer {\n        id\n      }\n      quantity\n      totalPaid\n      feePaid\n      timestamp\n    }\n  }\n}\n\nquery PublicMarketplaceListings($skip: Int!, $first: Int!, $orderBy: MarketplaceListing_orderBy = createdAt, $orderDirection: OrderDirection = desc, $now: Timestamp!) {\n  marketplaceListings(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: {status_in: [Active], endTime_gt: $now}\n  ) {\n    id\n    token {\n      id\n      project {\n        id\n        proposal {\n          name\n          standard\n        }\n      }\n      tokenURI\n    }\n    amount\n    remaining\n    pricePerUnit\n    endTime\n    status\n    seller {\n      id\n    }\n  }\n}": typeof types.MarketplaceListingsDocument,
    "query Project($id: ID!) {\n  project(id: $id) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n      location\n      methodology\n      projectPlanCID\n      eiaCID\n      estimatedCredits\n      otherDocsCID\n      vintage\n      developer {\n        role\n        id\n      }\n    }\n    createdAt\n  }\n}\n\nquery Projects($first: Int!, $skip: Int!, $developer: String, $status_in: [ProjectStatus!], $name: String) {\n  projects(\n    skip: $skip\n    first: $first\n    where: {developer_contains: $developer, status_in: $status_in, proposal_: {name_contains: $name}}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n    }\n    createdAt\n  }\n}": typeof types.ProjectDocument,
    "query Proof($id: ID!) {\n  proof(id: $id) {\n    proofCID\n    submittedAt\n    id\n    audits {\n      commentCID\n      id\n      action\n      timestamp\n      auditor {\n        id\n      }\n    }\n    project {\n      proposal {\n        location\n        methodology\n        standard\n        vintage\n        estimatedCredits\n        name\n        id\n      }\n    }\n  }\n}\n\nquery ProjectsWithProof($first: Int!, $skip: Int!, $developer: String, $name: String, $standard_in: [Standard!]) {\n  projects(\n    first: $first\n    skip: $skip\n    where: {status: ProofSubmitted, proposal_: {name_contains: $name, standard_in: $standard_in, developer_contains: $developer}}\n    orderDirection: desc\n  ) {\n    proofs {\n      id\n      proofCID\n      submittedAt\n    }\n    proposal {\n      developer {\n        id\n      }\n      name\n      standard\n      estimatedCredits\n    }\n  }\n}": typeof types.ProofDocument,
    "fragment AuditorFeedbackFields on ProposalReview {\n  id\n  timestamp\n  commentCID\n  auditor {\n    id\n  }\n}\n\nquery Proposal($id: ID!) {\n  proposal(id: $id) {\n    description\n    eiaCID\n    estimatedCredits\n    id\n    location\n    metadataCID\n    methodology\n    name\n    otherDocsCID\n    projectPlanCID\n    reviews {\n      ...AuditorFeedbackFields\n    }\n    standard\n    status\n    vintage\n    developer {\n      id\n    }\n    submittedAt\n  }\n}\n\nquery Proposals($first: Int!, $skip: Int!, $developer: String, $name: String, $status_in: [ProposalStatus!], $standard_in: [Standard!]) {\n  proposals(\n    first: $first\n    skip: $skip\n    where: {developer_contains: $developer, name_contains: $name, status_in: $status_in, standard_in: $standard_in}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    developer {\n      id\n    }\n    description\n    location\n    estimatedCredits\n    vintage\n    methodology\n    projectPlanCID\n    eiaCID\n    otherDocsCID\n    metadataCID\n    standard\n    status\n    submittedAt\n  }\n}": typeof types.AuditorFeedbackFieldsFragmentDoc,
    "query ProposalReviews($first: Int!, $skip: Int!, $auditor: String) {\n  proposalRevieweds(\n    where: {auditor: $auditor}\n    skip: $skip\n    first: $first\n    orderBy: timestamp\n  ) {\n    id\n    timestamp\n    auditor {\n      id\n      reviews {\n        action\n        timestamp\n        proposal {\n          id\n          developer {\n            id\n          }\n          name\n          submittedAt\n        }\n      }\n    }\n  }\n}\n\nquery ProofAudits($first: Int!, $skip: Int!, $auditor: String) {\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    id\n    timestamp\n    proof {\n      id\n      submittedAt\n      project {\n        proposal {\n          name\n        }\n      }\n      developer {\n        id\n      }\n    }\n  }\n}": typeof types.ProposalReviewsDocument,
    "query PublicStats {\n  dailyCreditStats: dailyCreditStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n  dailyRetirementStats: dailyRetirementStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n  dailyMarketplaceStats: dailyMarketplaceStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n  dailyTransactionStats: dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DailyCreditStats($first: Int!, $skip: Int!) {\n  dailyCreditStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n}\n\nquery DailyRetirementStats($first: Int!, $skip: Int!) {\n  dailyRetirementStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n}\n\nquery DailyMarketplaceStats($first: Int!, $skip: Int!) {\n  dailyMarketplaceStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n}\n\nquery DailyTransactionStats($first: Int!, $skip: Int!) {\n  dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DeveloperStats($developer: String!) {\n  proposals(\n    where: {developer: $developer}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    description\n    status\n    submittedAt\n    vintage\n    methodology\n  }\n  creditsIssueds(\n    where: {developer: $developer}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    tokenId\n    amount\n    tokenURI\n    timestamp\n    transactionHash\n  }\n  creditBatches(\n    where: {developer: $developer}\n    orderBy: issuedAt\n    orderDirection: desc\n  ) {\n    id\n    tokenURI\n    amount\n    issuedAt\n    retiredAmount\n    project {\n      id\n      proposal {\n        name\n      }\n    }\n  }\n  marketplaceListings(\n    where: {seller: $developer, status: Active}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    token {\n      id\n      tokenURI\n      amount\n      retiredAmount\n    }\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n  }\n  marketplacePurchases(\n    where: {listing_: {seller: $developer}}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    buyer {\n      id\n    }\n    listing {\n      id\n      token {\n        id\n        tokenURI\n      }\n    }\n    quantity\n    totalPaid\n    feePaid\n    timestamp\n  }\n}\n\nquery AuditorStats($auditor: String!) {\n  proposals {\n    id\n    name\n    status\n    developer {\n      id\n    }\n    submittedAt\n  }\n  proofs {\n    id\n    project {\n      id\n      status\n      proposal {\n        name\n      }\n    }\n    submittedAt\n  }\n  proposalReviews(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n}": typeof types.PublicStatsDocument,
    "query User($id: ID!) {\n  user(id: $id) {\n    id\n    role\n    documentCid\n    proofOfAddressCid\n  }\n}\n\nquery UserCredits($id: ID!, $first: Int!, $skip: Int!) {\n  user(id: $id) {\n    creditBalances(where: {balance_not: \"0\"}, first: $first, skip: $skip) {\n      balance\n      id\n      batch {\n        project {\n          proposal {\n            vintage\n            name\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nquery UserRetiredCredits($id: String!, $first: Int!, $skip: Int!) {\n  creditsRetireds(\n    where: {holder: $id}\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    amount\n    blockNumber\n    id\n    retirementCID\n    timestamp\n    tokenId\n    transactionHash\n  }\n}": typeof types.UserDocument,
};
const documents: Documents = {
    "query MarketplaceListings($first: Int!, $skip: Int!, $status_in: [ListingStatus!], $seller: String!) {\n  marketplaceListings(\n    orderBy: createdAt\n    orderDirection: desc\n    skip: $skip\n    first: $first\n    where: {status_in: $status_in, seller: $seller}\n  ) {\n    id\n    seller {\n      id\n    }\n    token {\n      id\n      amount\n      retiredAmount\n      tokenURI\n      project {\n        proposal {\n          name\n        }\n      }\n    }\n    amount\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n    status\n    createdAt\n    updatedAt\n    purchases {\n      id\n      buyer {\n        id\n      }\n      quantity\n      totalPaid\n      feePaid\n      timestamp\n    }\n  }\n}\n\nquery PublicMarketplaceListings($skip: Int!, $first: Int!, $orderBy: MarketplaceListing_orderBy = createdAt, $orderDirection: OrderDirection = desc, $now: Timestamp!) {\n  marketplaceListings(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: {status_in: [Active], endTime_gt: $now}\n  ) {\n    id\n    token {\n      id\n      project {\n        id\n        proposal {\n          name\n          standard\n        }\n      }\n      tokenURI\n    }\n    amount\n    remaining\n    pricePerUnit\n    endTime\n    status\n    seller {\n      id\n    }\n  }\n}": types.MarketplaceListingsDocument,
    "query Project($id: ID!) {\n  project(id: $id) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n      location\n      methodology\n      projectPlanCID\n      eiaCID\n      estimatedCredits\n      otherDocsCID\n      vintage\n      developer {\n        role\n        id\n      }\n    }\n    createdAt\n  }\n}\n\nquery Projects($first: Int!, $skip: Int!, $developer: String, $status_in: [ProjectStatus!], $name: String) {\n  projects(\n    skip: $skip\n    first: $first\n    where: {developer_contains: $developer, status_in: $status_in, proposal_: {name_contains: $name}}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n    }\n    createdAt\n  }\n}": types.ProjectDocument,
    "query Proof($id: ID!) {\n  proof(id: $id) {\n    proofCID\n    submittedAt\n    id\n    audits {\n      commentCID\n      id\n      action\n      timestamp\n      auditor {\n        id\n      }\n    }\n    project {\n      proposal {\n        location\n        methodology\n        standard\n        vintage\n        estimatedCredits\n        name\n        id\n      }\n    }\n  }\n}\n\nquery ProjectsWithProof($first: Int!, $skip: Int!, $developer: String, $name: String, $standard_in: [Standard!]) {\n  projects(\n    first: $first\n    skip: $skip\n    where: {status: ProofSubmitted, proposal_: {name_contains: $name, standard_in: $standard_in, developer_contains: $developer}}\n    orderDirection: desc\n  ) {\n    proofs {\n      id\n      proofCID\n      submittedAt\n    }\n    proposal {\n      developer {\n        id\n      }\n      name\n      standard\n      estimatedCredits\n    }\n  }\n}": types.ProofDocument,
    "fragment AuditorFeedbackFields on ProposalReview {\n  id\n  timestamp\n  commentCID\n  auditor {\n    id\n  }\n}\n\nquery Proposal($id: ID!) {\n  proposal(id: $id) {\n    description\n    eiaCID\n    estimatedCredits\n    id\n    location\n    metadataCID\n    methodology\n    name\n    otherDocsCID\n    projectPlanCID\n    reviews {\n      ...AuditorFeedbackFields\n    }\n    standard\n    status\n    vintage\n    developer {\n      id\n    }\n    submittedAt\n  }\n}\n\nquery Proposals($first: Int!, $skip: Int!, $developer: String, $name: String, $status_in: [ProposalStatus!], $standard_in: [Standard!]) {\n  proposals(\n    first: $first\n    skip: $skip\n    where: {developer_contains: $developer, name_contains: $name, status_in: $status_in, standard_in: $standard_in}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    developer {\n      id\n    }\n    description\n    location\n    estimatedCredits\n    vintage\n    methodology\n    projectPlanCID\n    eiaCID\n    otherDocsCID\n    metadataCID\n    standard\n    status\n    submittedAt\n  }\n}": types.AuditorFeedbackFieldsFragmentDoc,
    "query ProposalReviews($first: Int!, $skip: Int!, $auditor: String) {\n  proposalRevieweds(\n    where: {auditor: $auditor}\n    skip: $skip\n    first: $first\n    orderBy: timestamp\n  ) {\n    id\n    timestamp\n    auditor {\n      id\n      reviews {\n        action\n        timestamp\n        proposal {\n          id\n          developer {\n            id\n          }\n          name\n          submittedAt\n        }\n      }\n    }\n  }\n}\n\nquery ProofAudits($first: Int!, $skip: Int!, $auditor: String) {\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    id\n    timestamp\n    proof {\n      id\n      submittedAt\n      project {\n        proposal {\n          name\n        }\n      }\n      developer {\n        id\n      }\n    }\n  }\n}": types.ProposalReviewsDocument,
    "query PublicStats {\n  dailyCreditStats: dailyCreditStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n  dailyRetirementStats: dailyRetirementStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n  dailyMarketplaceStats: dailyMarketplaceStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n  dailyTransactionStats: dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DailyCreditStats($first: Int!, $skip: Int!) {\n  dailyCreditStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n}\n\nquery DailyRetirementStats($first: Int!, $skip: Int!) {\n  dailyRetirementStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n}\n\nquery DailyMarketplaceStats($first: Int!, $skip: Int!) {\n  dailyMarketplaceStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n}\n\nquery DailyTransactionStats($first: Int!, $skip: Int!) {\n  dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DeveloperStats($developer: String!) {\n  proposals(\n    where: {developer: $developer}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    description\n    status\n    submittedAt\n    vintage\n    methodology\n  }\n  creditsIssueds(\n    where: {developer: $developer}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    tokenId\n    amount\n    tokenURI\n    timestamp\n    transactionHash\n  }\n  creditBatches(\n    where: {developer: $developer}\n    orderBy: issuedAt\n    orderDirection: desc\n  ) {\n    id\n    tokenURI\n    amount\n    issuedAt\n    retiredAmount\n    project {\n      id\n      proposal {\n        name\n      }\n    }\n  }\n  marketplaceListings(\n    where: {seller: $developer, status: Active}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    token {\n      id\n      tokenURI\n      amount\n      retiredAmount\n    }\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n  }\n  marketplacePurchases(\n    where: {listing_: {seller: $developer}}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    buyer {\n      id\n    }\n    listing {\n      id\n      token {\n        id\n        tokenURI\n      }\n    }\n    quantity\n    totalPaid\n    feePaid\n    timestamp\n  }\n}\n\nquery AuditorStats($auditor: String!) {\n  proposals {\n    id\n    name\n    status\n    developer {\n      id\n    }\n    submittedAt\n  }\n  proofs {\n    id\n    project {\n      id\n      status\n      proposal {\n        name\n      }\n    }\n    submittedAt\n  }\n  proposalReviews(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n}": types.PublicStatsDocument,
    "query User($id: ID!) {\n  user(id: $id) {\n    id\n    role\n    documentCid\n    proofOfAddressCid\n  }\n}\n\nquery UserCredits($id: ID!, $first: Int!, $skip: Int!) {\n  user(id: $id) {\n    creditBalances(where: {balance_not: \"0\"}, first: $first, skip: $skip) {\n      balance\n      id\n      batch {\n        project {\n          proposal {\n            vintage\n            name\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nquery UserRetiredCredits($id: String!, $first: Int!, $skip: Int!) {\n  creditsRetireds(\n    where: {holder: $id}\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    amount\n    blockNumber\n    id\n    retirementCID\n    timestamp\n    tokenId\n    transactionHash\n  }\n}": types.UserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MarketplaceListings($first: Int!, $skip: Int!, $status_in: [ListingStatus!], $seller: String!) {\n  marketplaceListings(\n    orderBy: createdAt\n    orderDirection: desc\n    skip: $skip\n    first: $first\n    where: {status_in: $status_in, seller: $seller}\n  ) {\n    id\n    seller {\n      id\n    }\n    token {\n      id\n      amount\n      retiredAmount\n      tokenURI\n      project {\n        proposal {\n          name\n        }\n      }\n    }\n    amount\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n    status\n    createdAt\n    updatedAt\n    purchases {\n      id\n      buyer {\n        id\n      }\n      quantity\n      totalPaid\n      feePaid\n      timestamp\n    }\n  }\n}\n\nquery PublicMarketplaceListings($skip: Int!, $first: Int!, $orderBy: MarketplaceListing_orderBy = createdAt, $orderDirection: OrderDirection = desc, $now: Timestamp!) {\n  marketplaceListings(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: {status_in: [Active], endTime_gt: $now}\n  ) {\n    id\n    token {\n      id\n      project {\n        id\n        proposal {\n          name\n          standard\n        }\n      }\n      tokenURI\n    }\n    amount\n    remaining\n    pricePerUnit\n    endTime\n    status\n    seller {\n      id\n    }\n  }\n}"): (typeof documents)["query MarketplaceListings($first: Int!, $skip: Int!, $status_in: [ListingStatus!], $seller: String!) {\n  marketplaceListings(\n    orderBy: createdAt\n    orderDirection: desc\n    skip: $skip\n    first: $first\n    where: {status_in: $status_in, seller: $seller}\n  ) {\n    id\n    seller {\n      id\n    }\n    token {\n      id\n      amount\n      retiredAmount\n      tokenURI\n      project {\n        proposal {\n          name\n        }\n      }\n    }\n    amount\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n    status\n    createdAt\n    updatedAt\n    purchases {\n      id\n      buyer {\n        id\n      }\n      quantity\n      totalPaid\n      feePaid\n      timestamp\n    }\n  }\n}\n\nquery PublicMarketplaceListings($skip: Int!, $first: Int!, $orderBy: MarketplaceListing_orderBy = createdAt, $orderDirection: OrderDirection = desc, $now: Timestamp!) {\n  marketplaceListings(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: {status_in: [Active], endTime_gt: $now}\n  ) {\n    id\n    token {\n      id\n      project {\n        id\n        proposal {\n          name\n          standard\n        }\n      }\n      tokenURI\n    }\n    amount\n    remaining\n    pricePerUnit\n    endTime\n    status\n    seller {\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Project($id: ID!) {\n  project(id: $id) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n      location\n      methodology\n      projectPlanCID\n      eiaCID\n      estimatedCredits\n      otherDocsCID\n      vintage\n      developer {\n        role\n        id\n      }\n    }\n    createdAt\n  }\n}\n\nquery Projects($first: Int!, $skip: Int!, $developer: String, $status_in: [ProjectStatus!], $name: String) {\n  projects(\n    skip: $skip\n    first: $first\n    where: {developer_contains: $developer, status_in: $status_in, proposal_: {name_contains: $name}}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n    }\n    createdAt\n  }\n}"): (typeof documents)["query Project($id: ID!) {\n  project(id: $id) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n      location\n      methodology\n      projectPlanCID\n      eiaCID\n      estimatedCredits\n      otherDocsCID\n      vintage\n      developer {\n        role\n        id\n      }\n    }\n    createdAt\n  }\n}\n\nquery Projects($first: Int!, $skip: Int!, $developer: String, $status_in: [ProjectStatus!], $name: String) {\n  projects(\n    skip: $skip\n    first: $first\n    where: {developer_contains: $developer, status_in: $status_in, proposal_: {name_contains: $name}}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    status\n    proposal {\n      description\n      id\n      name\n      standard\n    }\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Proof($id: ID!) {\n  proof(id: $id) {\n    proofCID\n    submittedAt\n    id\n    audits {\n      commentCID\n      id\n      action\n      timestamp\n      auditor {\n        id\n      }\n    }\n    project {\n      proposal {\n        location\n        methodology\n        standard\n        vintage\n        estimatedCredits\n        name\n        id\n      }\n    }\n  }\n}\n\nquery ProjectsWithProof($first: Int!, $skip: Int!, $developer: String, $name: String, $standard_in: [Standard!]) {\n  projects(\n    first: $first\n    skip: $skip\n    where: {status: ProofSubmitted, proposal_: {name_contains: $name, standard_in: $standard_in, developer_contains: $developer}}\n    orderDirection: desc\n  ) {\n    proofs {\n      id\n      proofCID\n      submittedAt\n    }\n    proposal {\n      developer {\n        id\n      }\n      name\n      standard\n      estimatedCredits\n    }\n  }\n}"): (typeof documents)["query Proof($id: ID!) {\n  proof(id: $id) {\n    proofCID\n    submittedAt\n    id\n    audits {\n      commentCID\n      id\n      action\n      timestamp\n      auditor {\n        id\n      }\n    }\n    project {\n      proposal {\n        location\n        methodology\n        standard\n        vintage\n        estimatedCredits\n        name\n        id\n      }\n    }\n  }\n}\n\nquery ProjectsWithProof($first: Int!, $skip: Int!, $developer: String, $name: String, $standard_in: [Standard!]) {\n  projects(\n    first: $first\n    skip: $skip\n    where: {status: ProofSubmitted, proposal_: {name_contains: $name, standard_in: $standard_in, developer_contains: $developer}}\n    orderDirection: desc\n  ) {\n    proofs {\n      id\n      proofCID\n      submittedAt\n    }\n    proposal {\n      developer {\n        id\n      }\n      name\n      standard\n      estimatedCredits\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AuditorFeedbackFields on ProposalReview {\n  id\n  timestamp\n  commentCID\n  auditor {\n    id\n  }\n}\n\nquery Proposal($id: ID!) {\n  proposal(id: $id) {\n    description\n    eiaCID\n    estimatedCredits\n    id\n    location\n    metadataCID\n    methodology\n    name\n    otherDocsCID\n    projectPlanCID\n    reviews {\n      ...AuditorFeedbackFields\n    }\n    standard\n    status\n    vintage\n    developer {\n      id\n    }\n    submittedAt\n  }\n}\n\nquery Proposals($first: Int!, $skip: Int!, $developer: String, $name: String, $status_in: [ProposalStatus!], $standard_in: [Standard!]) {\n  proposals(\n    first: $first\n    skip: $skip\n    where: {developer_contains: $developer, name_contains: $name, status_in: $status_in, standard_in: $standard_in}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    developer {\n      id\n    }\n    description\n    location\n    estimatedCredits\n    vintage\n    methodology\n    projectPlanCID\n    eiaCID\n    otherDocsCID\n    metadataCID\n    standard\n    status\n    submittedAt\n  }\n}"): (typeof documents)["fragment AuditorFeedbackFields on ProposalReview {\n  id\n  timestamp\n  commentCID\n  auditor {\n    id\n  }\n}\n\nquery Proposal($id: ID!) {\n  proposal(id: $id) {\n    description\n    eiaCID\n    estimatedCredits\n    id\n    location\n    metadataCID\n    methodology\n    name\n    otherDocsCID\n    projectPlanCID\n    reviews {\n      ...AuditorFeedbackFields\n    }\n    standard\n    status\n    vintage\n    developer {\n      id\n    }\n    submittedAt\n  }\n}\n\nquery Proposals($first: Int!, $skip: Int!, $developer: String, $name: String, $status_in: [ProposalStatus!], $standard_in: [Standard!]) {\n  proposals(\n    first: $first\n    skip: $skip\n    where: {developer_contains: $developer, name_contains: $name, status_in: $status_in, standard_in: $standard_in}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    developer {\n      id\n    }\n    description\n    location\n    estimatedCredits\n    vintage\n    methodology\n    projectPlanCID\n    eiaCID\n    otherDocsCID\n    metadataCID\n    standard\n    status\n    submittedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProposalReviews($first: Int!, $skip: Int!, $auditor: String) {\n  proposalRevieweds(\n    where: {auditor: $auditor}\n    skip: $skip\n    first: $first\n    orderBy: timestamp\n  ) {\n    id\n    timestamp\n    auditor {\n      id\n      reviews {\n        action\n        timestamp\n        proposal {\n          id\n          developer {\n            id\n          }\n          name\n          submittedAt\n        }\n      }\n    }\n  }\n}\n\nquery ProofAudits($first: Int!, $skip: Int!, $auditor: String) {\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    id\n    timestamp\n    proof {\n      id\n      submittedAt\n      project {\n        proposal {\n          name\n        }\n      }\n      developer {\n        id\n      }\n    }\n  }\n}"): (typeof documents)["query ProposalReviews($first: Int!, $skip: Int!, $auditor: String) {\n  proposalRevieweds(\n    where: {auditor: $auditor}\n    skip: $skip\n    first: $first\n    orderBy: timestamp\n  ) {\n    id\n    timestamp\n    auditor {\n      id\n      reviews {\n        action\n        timestamp\n        proposal {\n          id\n          developer {\n            id\n          }\n          name\n          submittedAt\n        }\n      }\n    }\n  }\n}\n\nquery ProofAudits($first: Int!, $skip: Int!, $auditor: String) {\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    id\n    timestamp\n    proof {\n      id\n      submittedAt\n      project {\n        proposal {\n          name\n        }\n      }\n      developer {\n        id\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PublicStats {\n  dailyCreditStats: dailyCreditStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n  dailyRetirementStats: dailyRetirementStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n  dailyMarketplaceStats: dailyMarketplaceStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n  dailyTransactionStats: dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DailyCreditStats($first: Int!, $skip: Int!) {\n  dailyCreditStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n}\n\nquery DailyRetirementStats($first: Int!, $skip: Int!) {\n  dailyRetirementStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n}\n\nquery DailyMarketplaceStats($first: Int!, $skip: Int!) {\n  dailyMarketplaceStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n}\n\nquery DailyTransactionStats($first: Int!, $skip: Int!) {\n  dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DeveloperStats($developer: String!) {\n  proposals(\n    where: {developer: $developer}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    description\n    status\n    submittedAt\n    vintage\n    methodology\n  }\n  creditsIssueds(\n    where: {developer: $developer}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    tokenId\n    amount\n    tokenURI\n    timestamp\n    transactionHash\n  }\n  creditBatches(\n    where: {developer: $developer}\n    orderBy: issuedAt\n    orderDirection: desc\n  ) {\n    id\n    tokenURI\n    amount\n    issuedAt\n    retiredAmount\n    project {\n      id\n      proposal {\n        name\n      }\n    }\n  }\n  marketplaceListings(\n    where: {seller: $developer, status: Active}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    token {\n      id\n      tokenURI\n      amount\n      retiredAmount\n    }\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n  }\n  marketplacePurchases(\n    where: {listing_: {seller: $developer}}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    buyer {\n      id\n    }\n    listing {\n      id\n      token {\n        id\n        tokenURI\n      }\n    }\n    quantity\n    totalPaid\n    feePaid\n    timestamp\n  }\n}\n\nquery AuditorStats($auditor: String!) {\n  proposals {\n    id\n    name\n    status\n    developer {\n      id\n    }\n    submittedAt\n  }\n  proofs {\n    id\n    project {\n      id\n      status\n      proposal {\n        name\n      }\n    }\n    submittedAt\n  }\n  proposalReviews(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n}"): (typeof documents)["query PublicStats {\n  dailyCreditStats: dailyCreditStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n  dailyRetirementStats: dailyRetirementStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n  dailyMarketplaceStats: dailyMarketplaceStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n  dailyTransactionStats: dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DailyCreditStats($first: Int!, $skip: Int!) {\n  dailyCreditStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n  }\n}\n\nquery DailyRetirementStats($first: Int!, $skip: Int!) {\n  dailyRetirementStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    total\n    count\n  }\n}\n\nquery DailyMarketplaceStats($first: Int!, $skip: Int!) {\n  dailyMarketplaceStats_collection(\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    dailyVolume\n    dailyPurchases\n    dailyFees\n  }\n}\n\nquery DailyTransactionStats($first: Int!, $skip: Int!) {\n  dailyTransactionStats_collection(\n    orderBy: timestamp\n    orderDirection: desc\n    interval: day\n  ) {\n    id\n    timestamp\n    count\n  }\n}\n\nquery DeveloperStats($developer: String!) {\n  proposals(\n    where: {developer: $developer}\n    orderBy: submittedAt\n    orderDirection: desc\n  ) {\n    id\n    name\n    description\n    status\n    submittedAt\n    vintage\n    methodology\n  }\n  creditsIssueds(\n    where: {developer: $developer}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    tokenId\n    amount\n    tokenURI\n    timestamp\n    transactionHash\n  }\n  creditBatches(\n    where: {developer: $developer}\n    orderBy: issuedAt\n    orderDirection: desc\n  ) {\n    id\n    tokenURI\n    amount\n    issuedAt\n    retiredAmount\n    project {\n      id\n      proposal {\n        name\n      }\n    }\n  }\n  marketplaceListings(\n    where: {seller: $developer, status: Active}\n    orderBy: createdAt\n    orderDirection: desc\n  ) {\n    id\n    token {\n      id\n      tokenURI\n      amount\n      retiredAmount\n    }\n    remaining\n    pricePerUnit\n    startTime\n    endTime\n  }\n  marketplacePurchases(\n    where: {listing_: {seller: $developer}}\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    id\n    buyer {\n      id\n    }\n    listing {\n      id\n      token {\n        id\n        tokenURI\n      }\n    }\n    quantity\n    totalPaid\n    feePaid\n    timestamp\n  }\n}\n\nquery AuditorStats($auditor: String!) {\n  proposals {\n    id\n    name\n    status\n    developer {\n      id\n    }\n    submittedAt\n  }\n  proofs {\n    id\n    project {\n      id\n      status\n      proposal {\n        name\n      }\n    }\n    submittedAt\n  }\n  proposalReviews(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n  proofAudits(where: {auditor: $auditor}) {\n    action\n    commentCID\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query User($id: ID!) {\n  user(id: $id) {\n    id\n    role\n    documentCid\n    proofOfAddressCid\n  }\n}\n\nquery UserCredits($id: ID!, $first: Int!, $skip: Int!) {\n  user(id: $id) {\n    creditBalances(where: {balance_not: \"0\"}, first: $first, skip: $skip) {\n      balance\n      id\n      batch {\n        project {\n          proposal {\n            vintage\n            name\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nquery UserRetiredCredits($id: String!, $first: Int!, $skip: Int!) {\n  creditsRetireds(\n    where: {holder: $id}\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    amount\n    blockNumber\n    id\n    retirementCID\n    timestamp\n    tokenId\n    transactionHash\n  }\n}"): (typeof documents)["query User($id: ID!) {\n  user(id: $id) {\n    id\n    role\n    documentCid\n    proofOfAddressCid\n  }\n}\n\nquery UserCredits($id: ID!, $first: Int!, $skip: Int!) {\n  user(id: $id) {\n    creditBalances(where: {balance_not: \"0\"}, first: $first, skip: $skip) {\n      balance\n      id\n      batch {\n        project {\n          proposal {\n            vintage\n            name\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nquery UserRetiredCredits($id: String!, $first: Int!, $skip: Int!) {\n  creditsRetireds(\n    where: {holder: $id}\n    first: $first\n    skip: $skip\n    orderBy: timestamp\n    orderDirection: desc\n  ) {\n    amount\n    blockNumber\n    id\n    retirementCID\n    timestamp\n    tokenId\n    transactionHash\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;