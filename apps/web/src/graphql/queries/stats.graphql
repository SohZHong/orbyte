# Public Transparency Stats

query PublicStats {
  dailyCreditStats: dailyCreditStats_collection(
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    total
  }

  dailyRetirementStats: dailyRetirementStats_collection(
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    total
    count
  }

  dailyMarketplaceStats: dailyMarketplaceStats_collection(
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    dailyVolume
    dailyPurchases
    dailyFees
  }

  dailyTransactionStats: dailyTransactionStats_collection(
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    count
  }
}

query DailyCreditStats($first: Int!, $skip: Int!) {
  dailyCreditStats_collection(
    first: $first
    skip: $skip
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    total # total credits issued that day
  }
}

query DailyRetirementStats($first: Int!, $skip: Int!) {
  dailyRetirementStats_collection(
    first: $first
    skip: $skip
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    total # total credits retired that day
    count # number of retirements
  }
}

query DailyMarketplaceStats($first: Int!, $skip: Int!) {
  dailyMarketplaceStats_collection(
    first: $first
    skip: $skip
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    dailyVolume # credits traded
    dailyPurchases # number of purchases
    dailyFees # fees collected
  }
}

query DailyTransactionStats($first: Int!, $skip: Int!) {
  dailyTransactionStats_collection(
    orderBy: timestamp
    orderDirection: desc
    interval: day
  ) {
    id
    timestamp
    count # total number of on-chain transfers/transactions
  }
}

# Developer Dashboard Stats

query DeveloperStats($developer: String!) {
  proposals(
    where: { developer: $developer }
    orderBy: submittedAt
    orderDirection: desc
  ) {
    id
    name
    description
    status
    submittedAt
    vintage
    methodology
  }

  creditsIssueds(
    where: { developer: $developer }
    orderBy: timestamp
    orderDirection: desc
  ) {
    id
    tokenId
    amount
    tokenURI
    timestamp
    transactionHash
  }

  creditBatches(
    where: { developer: $developer }
    orderBy: issuedAt
    orderDirection: desc
  ) {
    id
    tokenURI
    amount
    issuedAt
    retiredAmount
    project {
      id
      proposal {
        name
      }
    }
  }

  marketplaceListings(
    where: { seller: $developer, status: Active }
    orderBy: createdAt
    orderDirection: desc
  ) {
    id
    token {
      id
      tokenURI
      amount
      retiredAmount
    }
    remaining
    pricePerUnit
    startTime
    endTime
  }

  marketplacePurchases(
    where: { listing_: { seller: $developer } }
    orderBy: timestamp
    orderDirection: desc
  ) {
    id
    buyer {
      id
    }
    listing {
      id
      token {
        id
        tokenURI
      }
    }
    quantity
    totalPaid
    feePaid
    timestamp
  }
}

# Auditor Dashboard Stats

query AuditorStats($auditor: String!) {
  # Fetch all proposals to compute total and pending counts
  proposals {
    id
    name
    status
    developer {
      id
    }
    submittedAt
  }

  # Fetch all proofs to compute total and pending counts
  proofs {
    id
    project {
      id
      status
      proposal {
        name
      }
    }
    submittedAt
  }

  # Auditor's past reviews
  proposalReviews(where: { auditor: $auditor }) {
    action
    commentCID
    id
  }
  proofAudits(where: { auditor: $auditor }) {
    action
    commentCID
    id
  }
}
